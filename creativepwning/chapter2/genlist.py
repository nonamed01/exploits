########################################################################################
# genlist.py
#   2024 by Socialk@s, a.k.a @Disbauxes
#   Generates a list of functions that can be replaced with a different one by
#   just overwritting the last byte in the got with no leaks at all.
#
#   USAGE:
#       python3 genlist.py [PATH_TO_LIBC.SO.6]
########################################################################################
import r2pipe
import sys
import re

# Default output file:
outfile =   "/tmp/libc6.symbols"

# Default libc:
libc6   =   "/lib/x86_64-linux-gnu/libc.so.6"

# Opens libc6 and generates the file with all the symbols using r2:
def genList(libc6):
    r = r2pipe.open(libc6)
    r.cmd("aaaa")
    r.cmd("afl a~sym.|sort> %s " % outfile)

def genTurnList():
    fd = open(outfile,'r')
    oldofft = 0x0
    while True:
        dl = re.sub(r'\s+', ' ',fd.readline().strip())
        if dl != '':
            # We recover offset, size and name:
            data = dl.split(' ')
            offt = int(data[0],16) & 0xffffff00
            size = int(data[2])
            func = data[3]
            if oldofft != offt:
                oldofft = offt
                print("Functions grouped by 0x%02x" % offt)
            print("\t%s:%d:%s" % (data[0],size,func))
        else:
            break
    fd.close()

# We generate the temporary file with all the symbols sorted numerically by offset:
if len(sys.argv)==2 and sys.argv[1] != '':
    libc6   =   sys.argv[1]
print("Generating function list from %s " % libc6)
genList(libc6)

# After that, we process the file and end up with a list of functions that can
# be replaced without leaks:
genTurnList()
